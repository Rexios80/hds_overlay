# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
'on':
  push:
    branches:
      - master
    tags:
      - v.*

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build_linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: subosito/flutter-action@v1.5.0
          
      - name: Setup
        run: |
          flutter config --enable-linux-desktop
          flutter pub get
          
      - name: Patch for linux build
        run: |
          sudo apt update
          sudo apt install clang
          sudo apt install ninja-build
          sudo apt install libgtk-3-dev
          sudo apt install vlc
          sudo apt install libvlc-dev
          
      - name: Test
        run: flutter test
        
      - name: Build
        run: flutter build linux
        
      - name: Archive artifact
        uses: actions/upload-artifact@v2
        with:
          name: linux
          path: build/linux/x64/release/bundle/hds_overlay
  
  build_macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - uses: subosito/flutter-action@v1
          
      - name: Setup
        run: |
          flutter config --enable-macos-desktop
          flutter pub get
          
      - name: Test
        run: flutter test

      - name: Import Code-Signing Certificates
        uses: Apple-Actions/import-codesign-certs@v1
        with:
          # The certificates in a PKCS12 file encoded as a base64 string
          p12-file-base64: ${{ secrets.DISTRIBUTION_CERTIFICATE_DATA }}
          # The password used to import the PKCS12 file.
          p12-password: ${{ secrets.DISTRIBUTION_CERTIFICATE_PASSPHRASE }}

      - name: Build
        run: flutter build macos

      - name: Install gon via HomeBrew for code signing and app notarization
        run: |
          brew tap mitchellh/gon
          brew install mitchellh/gon/gon

      - name: Sign the mac binaries with Gon
        env:
          NOTARIZATION_PASSWORD: ${{ secrets.NOTARIZATION_PASSWORD }}
        run: gon gonConfig.json
          
      - name: Archive artifact
        uses: actions/upload-artifact@v2
        with:
          name: macos
          path: "Health Data Server.dmg"
          
  build_windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - uses: subosito/flutter-action@v1
          
      - name: Setup
        run: |
          flutter config --enable-windows-desktop
          flutter pub get
          
      - name: Test
        run: flutter test
        
      - name: Build
        run: flutter build windows

      - name: Archive zip artifact
        uses: actions/upload-artifact@v2
        with:
          name: windows-exe
          path: build/windows/runner/Release/

      - name: Decode MSIX signing certificate
        id: write_file
        uses: timheuer/base64-to-file@v1
        with:
          fileName: fluttercertificate.pfx
          encodedString: ${{ secrets.MSIX_CERTIFICATE_DATA }}

      - name: Create msix
        run: flutter pub run msix:create --c "${{ steps.write_file.outputs.filePath }}" --p "${{ secrets.MSIX_CERTIFICATE_PASSWORD }}" --pu "${{ secrets.MSIX_PUBLISHER }}"

      - name: Archive msix artifact
        uses: actions/upload-artifact@v2
        with:
          name: windows-msix
          path: build/windows/runner/Release/hds_overlay.msix
          
  deploy:
    runs-on: ubuntu-latest
    needs: [build_linux, build_macos, build_windows]
    if: success() && contains(github.ref, 'refs/tags/')
    
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2

      - name: Zip windows-exe
        uses: papeloto/action-zip@v1
        with:
          files: windows-exe/
          recursive: false
          dest: windows-exe.zip
          
      - name: Create release draft
        uses: ncipollo/release-action@v1
        with:
            artifacts: "windows-exe.zip,windows-msix/*,macos/*,linux/*"
            draft: true
            token: ${{ secrets.GITHUB_TOKEN }}
